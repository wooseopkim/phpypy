name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  define-globals:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.matrix.outputs.platforms }}
      cache-source: ${{ steps.cache.outputs.source }}
      cache-destination: ${{ steps.cache.outputs.destination }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - id: matrix
        run: |
          echo 'platforms=["linux/amd64", "linux/arm64"]' >> "$GITHUB_OUTPUT"
      - id: cache
        run: |
          echo "source=$([ "$ACT" == 'true' ] && echo 'type=local,src=/tmp' || echo 'type=gha')" >> "$GITHUB_OUTPUT"
          echo "destination=$([ "$ACT" == 'true' ] && echo 'type=local,dest=/tmp' || echo 'type=gha,mode=max')" >> "$GITHUB_OUTPUT"
        env:
          ACT: ${{ env.ACT }}
  prepare:
    needs: [define-globals]
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.define-globals.outputs.platforms) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          target: output
          push: false
          platforms: ${{ matrix.platform }}
          cache-from: ${{ needs.define-globals.outputs.cache-source }}
          cache-to: ${{ needs.define-globals.outputs.cache-destination }}
  check:
    # for Linux ARM runners are supported only as larger runners,
    # we need to run cross-platform tests inside Docker containers
    # see https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners/about-larger-runners
    runs-on: ubuntu-latest
    needs: [define-globals, prepare]
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.define-globals.outputs.platforms) }}
    env:
      PLATFORM: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          target: run
          push: false
          load: true
          tags: phpypy
          platforms: ${{ matrix.platform }}
          cache-from: ${{ needs.define-globals.outputs.cache-source }}
          cache-to: ${{ needs.define-globals.outputs.cache-destination }}

      - run: docker run --rm phpypy uv run pytest --capture=sys
      - run: docker run --rm phpypy uv run flit build
  build:
    runs-on: ubuntu-latest
    needs: [define-globals, prepare]
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.define-globals.outputs.platforms) }}
    steps:
      - id: target-platform
        run: |
          SPLIT=(${PLATFORM//\// })
          echo "os=${SPLIT[0]}" >> $GITHUB_OUTPUT
          echo "arch=${SPLIT[1]}" >> $GITHUB_OUTPUT
        env:
          PLATFORM: ${{ matrix.platform }}

      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          target: output
          push: false
          outputs: type=local,dest=./lib/${{ steps.target-platform.outputs.os }}/${{ steps.target-platform.outputs.arch }}
          platforms: ${{ matrix.platform }}
          cache-from: ${{ needs.define-globals.outputs.cache-source }}
          cache-to: ${{ needs.define-globals.outputs.cache-destination }}

      - if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: libs-${{ steps.target-platform.outputs.os }}-${{ steps.target-platform.outputs.arch }}
          path: ./lib
          if-no-files-found: error
  publish:
    if: github.ref == 'refs/heads/main'
    needs: [check, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - run: uv sync --frozen

      - uses: actions/download-artifact@v4
        with:
          path: /tmp/phpypy
          pattern: libs-*
      - run: mkdir ./lib
      - run: mv /tmp/phpypy/libs-* ./lib

      - run: uv run flit publish
        env:
          FLIT_INDEX_URL: https://test.pypi.org/legacy/
          FLIT_USERNAME: __token__
          FLIT_PASSWORD: ${{ secrets.PYPI_TOKEN }}
